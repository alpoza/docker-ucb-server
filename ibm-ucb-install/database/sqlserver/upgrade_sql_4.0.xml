<?xml version="1.0"?>
<!--
- Licensed Materials - Property of IBM Corp.
- IBM UrbanCode Build
- (c) Copyright IBM Corporation 2012, 2014. All Rights Reserved.
-
- U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by
- GSA ADP Schedule Contract with IBM Corp.
-->

<change-set release="4.0">
    <library name="reporting"
        release="4.0"
        base-dir="reporting"
        file="reporting/sqlserver/upgrade_sql_4.0.xml"
        version-table="REPORT_DB_VERSION"
        release-column="RELEASE_NAME"
        version-column="VER"/>
    />

    <change number="135">
      <description>Add colors to default statuses</description>
      <sql separator=";">
        UPDATE STATUS SET COLOR = '#90EE90' WHERE COLOR IS NULL AND ID = -1;
        UPDATE STATUS SET COLOR = '#FFB6C1' WHERE COLOR IS NULL AND ID = -2;
        UPDATE STATUS SET COLOR = '#D3D3D3' WHERE COLOR IS NULL AND ID = -3;
      </sql>
    </change>
    
    <change number="136">
      <description>Move artifact configurations to the workflow template.</description>
      <sql separator=";">
        DROP TABLE BUILD_PROFILE_ARTIFACT_DELIVER;
        
        CREATE TABLE WORKFLOW_ARTIFACT_DELIVER (
            ID                    BIGINT NOT NULL PRIMARY KEY,
            VERSION               BIGINT DEFAULT 0 NOT NULL,
            WORKFLOW_TEMPLATE_ID  BIGINT NOT NULL,
            ARTIFACT_SET_ID       BIGINT NOT NULL,
            BASE_DIRECTORY        NVARCHAR(255),
            INCLUDE_PATTERNS      NTEXT,
            EXCLUDE_PATTERNS      NTEXT
        );

        ALTER TABLE WORKFLOW_ARTIFACT_DELIVER ADD CONSTRAINT WAD_WORKFLOW_TEMPLATE_FK
            FOREIGN KEY (WORKFLOW_TEMPLATE_ID)
            REFERENCES WORKFLOW_TEMPLATE (ID)
            ON DELETE CASCADE
        ;
        
        ALTER TABLE WORKFLOW_ARTIFACT_DELIVER ADD CONSTRAINT WAD_ARTIFACT_SET_FK
            FOREIGN KEY (ARTIFACT_SET_ID)
            REFERENCES ARTIFACT_SET (ID)
        ;

        CREATE INDEX WAD_WORKFLOW_TEMPLATE_IX
            ON WORKFLOW_ARTIFACT_DELIVER(WORKFLOW_TEMPLATE_ID);
        
        CREATE INDEX WAD_ARTIFACT_SET_IX
            ON WORKFLOW_ARTIFACT_DELIVER(ARTIFACT_SET_ID);
            
        UPDATE HI_LO_SEQ SET SEQ_NAME = 'WORKFLOW_ARTIFACT_DELIVER'
        WHERE SEQ_NAME = 'BUILD_PROFILE_ARTIFACT_DELIVER';
      </sql>
    </change>
    
    <change number="137">
      <description>Remove Jabber and MSN ID columns. Add in a generic IM ID column.</description>
      <sql separator=";">
        ALTER TABLE UBUILD_USER DROP COLUMN MSN_ID;
        ALTER TABLE UBUILD_USER DROP COLUMN XMPP_ID;
        ALTER TABLE UBUILD_USER ADD IM_ID NVARCHAR(255);
      </sql>
    </change>
    
    <change number="138">
      <description>Remove Workflow Definition properties</description>
      <sql separator=";">
        DROP TABLE WORKFLOW_DEFINITION_PROPERTY;
      </sql>
    </change>
    
    <change number="139">
      <description>Rename and remove some resource roles and security actions</description>
      <sql separator=";">
        DELETE FROM sec_resource_role_to_action
            WHERE sec_resource_role_id = '00000000-0000-0000-0000-000000000608'
            AND sec_action_id = '00000000-0000-0000-0000-000000000052';
        INSERT INTO sec_resource_role_to_action (sec_resource_role_id, sec_action_id)
            VALUES('00000000-0000-0000-0000-000000000608', '00000000-0000-0000-0000-000000000052');
        UPDATE sec_resource_role SET name = 'Agent Pool Read-only', description = 'Read on Agent Pools.' 
            WHERE id = '00000000-0000-0000-0000-000000000602';
        UPDATE sec_resource_role SET description = 'Read on Script Groups.' WHERE id = '00000000-0000-0000-0000-000000000608';
        UPDATE sec_resource_role SET description = 'Read on Request Plans.' WHERE id = '00000000-0000-0000-0000-000000000611';
        UPDATE sec_resource_role SET description = 'Read on Project Templates.' WHERE id = '00000000-0000-0000-0000-000000000612';
        UPDATE sec_resource_role SET description = 'Read on Projects.' WHERE id = '00000000-0000-0000-0000-000000000600';
        DELETE FROM sec_role_action WHERE sec_action_id = '00000000-0000-0000-0000-000000000074';
        DELETE FROM sec_resource_role_to_action WHERE sec_action_id = '00000000-0000-0000-0000-000000000074';
        DELETE FROM sec_action WHERE id = '00000000-0000-0000-0000-000000000074';
      </sql>
    </change>
    
    <change number="140">
      <description>Fix Workflow Status Change event selector script</description>
      <sql separator=";">
        UPDATE WORKFLOW_CASE_SELECTOR SET SCRIPT = 'var result = false
var prevBuildLife = workflow.getBuildLife().getPrevious()
if (prevBuildLife == null) {
    result = true
}
else {
    var prevWorkflowCase = prevBuildLife.getWorkflow()
    if (prevWorkflowCase == null || !prevWorkflowCase.isComplete() || prevWorkflowCase.statusIsSuccess() != workflow.statusIsSuccess()) {
        result = true
    }
}

result' WHERE ID = -9;
      </sql>
    </change>
    
    <change number="141">
      <description>Fix Failure or First Success After Failure event selector script</description>
      <sql separator=";"><![CDATA[
        UPDATE WORKFLOW_CASE_SELECTOR SET SCRIPT = 'var result = false
if (!workflow.statusIsSuccess()) {
    result = true
}
else {
    var prevBuildLife = workflow.getBuildLife().getPrevious()
    if (prevBuildLife != null) {
        var prevWorkflowCase = prevBuildLife.getWorkflow()
        if (prevWorkflowCase != null && prevWorkflowCase.isComplete() && !prevWorkflowCase.statusIsSuccess() && workflow.statusIsSuccess()) {
            result = true
        }
    }
}

result' WHERE ID = -8;
      ]]></sql>
    </change>
    
    <change number="142">
      <description>Remove Task scripts</description>
      <sql separator=";">
        DELETE FROM WORKFLOW_CASE_SELECTOR WHERE ID IN (-4, -5, -6, -7);
      </sql>
    </change>
    
    <change number="143">
      <description>Add new notification template that includes a listing of steps</description>
      <sql>
        INSERT INTO TEMPLATE(ID, VERSION, CLASS, DATA) VALUES(-4, 0, 'com.urbancode.ubuild.domain.template.Template',
'<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<template>
<name>Workflow Email Template With Steps</name>
<template-text><![CDATA[## BEGIN SECTION Subject

#set($project = $workflow.Project)
#set($stamp = $workflow.BuildLife.latestStamp())

Workflow: 
#if($stamp != "")
  $project.Name - $workflow.Name ($stamp):
#else
  $project.Name - $workflow.Name:
#end

#if($workflow.Status.equalsIgnoreCase("Complete"))
  Success
#else
  $workflow.Status
#end

## END SECTION Subject

## BEGIN SECTION Body
## PROPERTY Content-Type: text/html
## PROPERTY X-Priority: 3

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
<title>Workflow</title>
<STYLE TYPE="text/css">
<!--
table.data-table td {
    vertical-align: top;
}

table.data-table
{
    font-family: arial, helvetica, sans-serif;
    font-size: 12px;
    background-color: #567596;
}

table.data-table caption
{
    padding-top: 10px;
    padding-bottom: 10px;
    text-align: left;
}

table.data-table th
{
    text-align: center;
    background-color: #cfdbef;
    height: 25px;
}

table.data-table td
{
    vertical-align: top;
}

table.data-table tr.odd
{
    background-color: #ffffff;
}

table.data-table tr.even
{
    background-color: #f6f6f6;
}

.data-table-button-bar
{
    padding-top: 10px;
    padding-bottom: 10px;
}

.data-table-container
{
    padding-top: 10px;
    padding-bottom: 10px;
}
-->
</STYLE>
</head>
<body>

<h1> Workflow: $workflow.Name
</h1>


<div class="data-table-container">
<table class="data-table" cellpadding="4" cellspacing="1" width="100%">
 <table-body>
  <tr class="data-table-head">
    <th scope="col" align="left" valign="middle"><strong>Job Name</strong></th>
    <th scope="col" align="left" valign="middle"><strong>Agent Name</strong></th>
    <th scope="col" align="left" valign="middle">Status</strong></th>
  </tr>
  #foreach($trace in $workflow.JobTraceList)
    <tr bgcolor="#ffffff">
      <td>$trace.Name</td>
      <td align="center">$trace.Agent</td>
      #set($status = $trace.Status)
      <td align="center">
        #if($trace.statusIsSuccess())
          <strong style="color: green">
        #elseif($trace.statusIsFailure())
          <strong style="color: red">
        #else
          <strong style="color: blue">
        #end
        $status</strong>
      </td>
    </tr>

    #foreach($step in $trace.StepList)
      <tr bgcolor="#ffffff">
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Step - $step.Name</td>
        <td align="center">$trace.Agent</td>
        #set($stepStatus = $step.Status)
        <td align="center">
          #if($step.statusIsSuccess())
            <strong style="color: green">
          #elseif($step.statusIsFailure())
            <strong style="color: red">
          #else
            <strong style="color: blue">
          #end
          $stepStatus</strong>
        </td>
      </tr>
    #end
  #end
 </table-body>
</table>

Additional information available on uBuild here:
  <a href="$workflow.Url">
  $workflow.Url</a>
</div>

</body>
</html>

## END SECTION Body]]]]><![CDATA[></template-text>
<description>A simple example of a velocity template for creating notification emails for notification service. This template also includes a listing of steps for each job.</description>
</template>]]>');;
      </sql>
    </change>
    <change number="144">
      <description>Add tables for auditing and reporting</description>
      <sql file="reporting/sqlserver/schema.ddl" separator=";"/>
      <sql file="reporting/foreign-keys.ddl" separator=";"/>
      <sql file="reporting/indexes.ddl" separator=";"/>
      <sql file="reporting/seed-data.sql" separator=";"/>
      <sql separator=";">
CREATE TABLE DATE_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    DATE_VAL         NVARCHAR(12) NOT NULL,
    YEAR_NUM         NVARCHAR(6) NOT NULL,
    MONTH            NVARCHAR(2) NOT NULL,
    DAY_OF_WEEK      NVARCHAR(1) NOT NULL,
    DAY_OF_MONTH     NVARCHAR(2) NOT NULL
);

CREATE TABLE TIME_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    TIME_VAL         NVARCHAR(8) NOT NULL,
    HOUR_OF_DAY      NVARCHAR(2) NOT NULL,
    MINUTE_OF_HOUR   NVARCHAR(2) NOT NULL,
    SECOND_OF_MINUTE NVARCHAR(2) NOT NULL
);

CREATE TABLE USER_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    USER_ID          NVARCHAR(255) NOT NULL,
    USER_NAME        NVARCHAR(255) NOT NULL,
    ACTUAL_NAME      NVARCHAR(255),
    EMAIL            NVARCHAR(255),
    IM               NVARCHAR(255),
    AUTH_REALM_ID    NVARCHAR(36) NOT NULL,
    AUTH_REALM_NAME  NVARCHAR(255) NOT NULL
);

CREATE TABLE CONFIG_OBJECT_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    HANDLE           NVARCHAR(128) NOT NULL,
    OBJECT_TYPE      NVARCHAR(64) NOT NULL,
    OBJECT_ID        NVARCHAR(36) NOT NULL,
    OBJECT_NAME      NVARCHAR(255) NOT NULL
);

CREATE TABLE OBJECT_CONFIG_AUDITING (
    ACTION           NVARCHAR(6) NOT NULL,
    OLD_VALUE        NVARCHAR(4000),
    NEW_VALUE        NVARCHAR(4000),
    DESCRIPTION      NVARCHAR(4000),
    ACTION_USER      NVARCHAR(36) NOT NULL,
    CONFIG_OBJECT    NVARCHAR(36) NOT NULL,
    ACTION_DATE      NVARCHAR(36) NOT NULL,
    ACTION_TIME      NVARCHAR(36) NOT NULL
);

ALTER TABLE OBJECT_CONFIG_AUDITING ADD CONSTRAINT OCA_ACTION_USER_FK
    FOREIGN KEY (ACTION_USER)
    REFERENCES USER_DIM (ID)
;

ALTER TABLE OBJECT_CONFIG_AUDITING ADD CONSTRAINT OCA_CONFIG_OBJECT_FK
    FOREIGN KEY (CONFIG_OBJECT)
    REFERENCES CONFIG_OBJECT_DIM (ID)
;

ALTER TABLE OBJECT_CONFIG_AUDITING ADD CONSTRAINT OCA_ACTION_DATE_FK
    FOREIGN KEY (ACTION_DATE)
    REFERENCES DATE_DIM (ID)
;

ALTER TABLE OBJECT_CONFIG_AUDITING ADD CONSTRAINT OCA_ACTION_TIME_FK
    FOREIGN KEY (ACTION_TIME)
    REFERENCES TIME_DIM (ID)
;

CREATE INDEX OCA_ACTION_USER_IX
    ON OBJECT_CONFIG_AUDITING(ACTION_USER);

CREATE INDEX OCA_CONFIG_OBJECT_IX
    ON OBJECT_CONFIG_AUDITING(CONFIG_OBJECT);

CREATE INDEX OCA_ACTION_DATE_IX
    ON OBJECT_CONFIG_AUDITING(ACTION_DATE);

CREATE INDEX OCA_ACTION_TIME_IX
    ON OBJECT_CONFIG_AUDITING(ACTION_TIME);
    
INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000001', 'DATE_DIM', 'Date information', 0);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000001', 'DATE_VAL', 'The formatted date: yyyy-mm-dd', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000001', 'YEAR_NUM', 'The numeric year', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000001', 'MONTH', 'The numeric month', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000001', 'DAY_OF_WEEK', 'The numeric day of the week', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000001', 'DAY_OF_MONTH', 'The numeric day of the month', 0, 0);

INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000002', 'TIME_DIM', 'Time information', 0);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000002', 'TIME_VAL', 'The formatted time: hh:mm:ss', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000002', 'HOUR_OF_DAY', 'The hour in the day: [0-23]', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000002', 'MINUTE_OF_HOUR', 'The minute in the hour: [0-59]', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000002', 'SECOND_OF_MINUTE', 'The seconds in the minute: [0-59]', 0, 0);

INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000003', 'USER_DIM', 'User information', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'USER_ID', 'The user id', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'USER_NAME', 'The user name', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'ACTUAL_NAME', 'The actual name of the user', 1, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'EMAIL', 'The user email address', 1, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'IM', 'The user IM identifier', 1, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'AUTH_REALM_ID', 'The authentication realm id', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000003', 'AUTH_REALM_NAME', 'The authentication realm name', 0, 0);

INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000004', 'CONFIG_OBJECT_DIM', 'Configuration object information', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000004', 'HANDLE', 'A unique identifier for the config object. Includes the object type and id.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000004', 'OBJECT_TYPE', 'The type of the configuration object', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000004', 'OBJECT_ID', 'The id of the configuration object', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000004', 'OBJECT_NAME', 'The name of the configuration object', 0, 0);

INSERT INTO REP_FACT_TABLE (ID, NAME, DESCRIPTION)
VALUES ('00000000-0000-0000-0000-000000000005', 'OBJECT_CONFIG_AUDITING', 'Auditing records on configuration changes');

INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000005', 'ACTION', 'Either ''create'', ''edit'', or ''delete''', 0);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000005', 'DESCRIPTION', 'A description of the action', 1);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000005', 'OLD_VALUE', 'The valued before the edit', 1);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000005', 'NEW_VALUE', 'The value after the edit', 1);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000005', 'ACTION_USER', 'The user who performed the action', 0, '00000000-0000-0000-0000-000000000003');
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000005', 'CONFIG_OBJECT', 'The configuration object acted on', 0, '00000000-0000-0000-0000-000000000004');
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000005', 'ACTION_DATE', 'The action date', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000005', 'ACTION_TIME', 'The action time', 0, '00000000-0000-0000-0000-000000000002');
      </sql>
    </change>
    <change number="145">
      <description>Drop old audit tables</description>
      <sql separator=";">
      DROP TABLE AUDIT_FLD;
      DROP TABLE AUDIT_ETY;
      DROP TABLE AUDIT_TRX;
      DROP TABLE AUDIT_UOW;
      </sql>
    </change>
    <change number="146">
      <description>Correct the auditing table configuration for case-sensitive databases</description>
      <sql separator=";">
UPDATE REP_DIMENSION SET NAME = 'DATE_DIM' WHERE NAME = 'date_dim';

UPDATE REP_DIMENSION_COLUMN SET NAME = 'DATE_VAL' WHERE NAME = 'date_val';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'YEAR_NUM' WHERE NAME = 'year_num';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'MONTH' WHERE NAME = 'month';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'DAY_OF_WEEK' WHERE NAME = 'day_of_week';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'DAY_OF_MONTH' WHERE NAME = 'day_of_month';

UPDATE REP_DIMENSION SET NAME = 'TIME_DIM' WHERE NAME = 'time_dim';

UPDATE REP_DIMENSION_COLUMN SET NAME = 'TIME_VAL' WHERE NAME = 'time_val';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'HOUR_OF_DAY' WHERE NAME = 'hour_of_day';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'MINUTE_OF_HOUR' WHERE NAME = 'minute_of_hour';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'SECOND_OF_MINUTE' WHERE NAME = 'second_of_minute';

UPDATE REP_DIMENSION SET NAME = 'USER_DIM' WHERE NAME = 'user_dim';

UPDATE REP_DIMENSION_COLUMN SET NAME = 'USER_ID' WHERE NAME = 'user_id';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'USER_NAME' WHERE NAME = 'user_name';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'ACTUAL_NAME' WHERE NAME = 'actual_name';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'EMAIL' WHERE NAME = 'email';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'IM' WHERE NAME = 'im';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'AUTH_REALM_ID' WHERE NAME = 'auth_realm_id';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'AUTH_REALM_NAME' WHERE NAME = 'auth_realm_name';

UPDATE REP_DIMENSION SET NAME = 'CONFIG_OBJECT_DIM' WHERE NAME = 'config_object_dim';

UPDATE REP_DIMENSION_COLUMN SET NAME = 'HANDLE' WHERE NAME = 'handle';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'OBJECT_TYPE' WHERE NAME = 'object_type';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'OBJECT_ID' WHERE NAME = 'object_id';
UPDATE REP_DIMENSION_COLUMN SET NAME = 'OBJECT_NAME' WHERE NAME = 'object_name';

UPDATE REP_FACT_TABLE SET NAME = 'OBJECT_CONFIG_AUDITING' WHERE NAME = 'object_config_auditing';

UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'ACTION' WHERE NAME = 'action';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'DESCRIPTION' WHERE NAME = 'description';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'OLD_VALUE' WHERE NAME = 'old_value';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'NEW_VALUE' WHERE NAME = 'new_value';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'ACTION_USER' WHERE NAME = 'action_user';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'CONFIG_OBJECT' WHERE NAME = 'config_object';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'ACTION_DATE' WHERE NAME = 'action_date';
UPDATE REP_FACT_TABLE_COLUMN SET NAME = 'ACTION_TIME' WHERE NAME = 'action_time';
      </sql>
    </change>
    <change number="147">
      <description>Add a column to store a step's property sheet reference.</description>
      <sql separator=";">
      ALTER TABLE JOB_CONFIG_STEP ADD PROP_SHEET_ID NVARCHAR(36);
      CREATE INDEX JCS_PROP_SHEET_IX ON JOB_CONFIG_STEP(PROP_SHEET_ID);
      </sql>
    </change>
    <change number="148">
      <description>Move the property sheet reference from XML to a column.</description>
      <groovy file="4.0/148_update_plugin_steps.groovy"/>
    </change>
    <change number="149">
      <description>Allow reporting dimensions to be updated.</description>
      <changeref library="reporting" change="4"/>
    </change>
    <change number="150">
      <description>Update reporting dimensions with update capability flag.</description>
      <sql separator=";">
      UPDATE REP_DIMENSION SET MUTABLE = 0 WHERE NAME = 'DATE_DIM';
      UPDATE REP_DIMENSION SET MUTABLE = 0 WHERE NAME = 'TIME_DIM';
      UPDATE REP_DIMENSION SET MUTABLE = 1 WHERE NAME = 'USER_DIM';
      UPDATE REP_DIMENSION SET MUTABLE = 1 WHERE NAME = 'CONFIG_OBJECT_DIM';
      </sql>
    </change>
    <change number="151">
      <description>Add testing to reporting.</description>
      <sql separator=";">
INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000006', 'PROJECT_TEMPLATE_DIM', 'Project Template', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000006', 'TEMPLATE_ID', 'The id of the project template.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000006', 'TEMPLATE_NAME', 'The name of the project template.', 0, 0);

CREATE TABLE PROJECT_TEMPLATE_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    TEMPLATE_ID      NVARCHAR(36) NOT NULL,
    TEMPLATE_NAME    NVARCHAR(255) NOT NULL
);


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000007', 'PROCESS_TEMPLATE_DIM', 'Process Template', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000007', 'TEMPLATE_ID', 'The id of the process template.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000007', 'TEMPLATE_NAME', 'The name of the process template.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000007', 'PROJECT_TEMPLATE', 'The project template of the process template.', 0, '00000000-0000-0000-0000-000000000006');

CREATE TABLE PROCESS_TEMPLATE_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    TEMPLATE_ID      NVARCHAR(36) NOT NULL,
    TEMPLATE_NAME    NVARCHAR(255) NOT NULL,
    PROJECT_TEMPLATE NVARCHAR(36) NOT NULL
);
CREATE INDEX PTD_PROJECT_TEMPLATE_IX
    ON PROCESS_TEMPLATE_DIM(PROJECT_TEMPLATE);
ALTER TABLE PROCESS_TEMPLATE_DIM ADD CONSTRAINT PTD_PROJECT_TEMPLATE_FK
    FOREIGN KEY (PROJECT_TEMPLATE)
    REFERENCES PROJECT_TEMPLATE_DIM (ID)
;


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000008', 'PROJECT_DIM', 'Project', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000008', 'PROJECT_ID', 'The id of the project.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000008', 'PROJECT_NAME', 'The name of the project.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000008', 'PROJECT_TEMPLATE', 'The project template used by the project.', 0, '00000000-0000-0000-0000-000000000006');

CREATE TABLE PROJECT_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    PROJECT_ID       NVARCHAR(36) NOT NULL,
    PROJECT_NAME     NVARCHAR(255) NOT NULL,
    PROJECT_TEMPLATE NVARCHAR(36) NOT NULL
);
CREATE INDEX PD_PROJECT_TEMPLATE_IX
    ON PROJECT_DIM(PROJECT_TEMPLATE);
ALTER TABLE PROJECT_DIM ADD CONSTRAINT PD_PROJECT_TEMPLATE_FK
    FOREIGN KEY (PROJECT_TEMPLATE)
    REFERENCES PROJECT_TEMPLATE_DIM (ID)
;


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROCESS_DIM', 'Process', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROCESS_ID', 'The id of the process.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROCESS_NAME', 'The name of the process.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROCESS_TYPE', 'The type of process. Build or Secondary.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROJECT', 'The project the process is in.', 0, '00000000-0000-0000-0000-000000000008');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000009', 'PROCESS_TEMPLATE', 'The process template used by the process.', 0, '00000000-0000-0000-0000-000000000007');

CREATE TABLE PROCESS_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    PROCESS_ID       NVARCHAR(36) NOT NULL,
    PROCESS_NAME     NVARCHAR(255) NOT NULL,
    PROCESS_TYPE     NVARCHAR(12) NOT NULL,
    PROJECT          NVARCHAR(36) NOT NULL,
    PROCESS_TEMPLATE NVARCHAR(36) NOT NULL
);
CREATE INDEX PD_PROJECT_IX
    ON PROCESS_DIM(PROJECT);
CREATE INDEX PD_PROCESS_TEMPLATE_IX
    ON PROCESS_DIM(PROCESS_TEMPLATE);
ALTER TABLE PROCESS_DIM ADD CONSTRAINT PD_PROJECT_FK
    FOREIGN KEY (PROJECT)
    REFERENCES PROJECT_DIM (ID)
;
ALTER TABLE PROCESS_DIM ADD CONSTRAINT PD_PROCESS_TEMPLATE_FK
    FOREIGN KEY (PROCESS_TEMPLATE)
    REFERENCES PROCESS_TEMPLATE_DIM (ID)
;


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000010', 'BUILD_LIFE_DIM', 'Build Life', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000010', 'BUILD_LIFE_ID', 'The id of the build life.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000010', 'BUILD_PROCESS', 'The build process of the build life.', 0, '00000000-0000-0000-0000-000000000009');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000010', 'CREATE_DATE', 'The creation date of the build life.', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000010', 'CREATE_TIME', 'The creation time of the build life.', 0, '00000000-0000-0000-0000-000000000002');

CREATE TABLE BUILD_LIFE_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    BUILD_LIFE_ID    NVARCHAR(36) NOT NULL,
    BUILD_PROCESS    NVARCHAR(36) NOT NULL,
    CREATE_DATE      NVARCHAR(36) NOT NULL,
    CREATE_TIME      NVARCHAR(36) NOT NULL
);
CREATE INDEX BLD_BUILD_PROCESS_IX
    ON BUILD_LIFE_DIM(BUILD_PROCESS);
CREATE INDEX BLD_CREATE_DATE_IX
    ON BUILD_LIFE_DIM(CREATE_DATE);
CREATE INDEX BLD_CREATE_TIME_IX
    ON BUILD_LIFE_DIM(CREATE_TIME);
ALTER TABLE BUILD_LIFE_DIM ADD CONSTRAINT BLD_BUILD_PROCESS_FK
    FOREIGN KEY (BUILD_PROCESS)
    REFERENCES PROCESS_DIM (ID)
;
ALTER TABLE BUILD_LIFE_DIM ADD CONSTRAINT BLD_CREATE_DATE_FK
    FOREIGN KEY (CREATE_DATE)
    REFERENCES DATE_DIM (ID)
;
ALTER TABLE BUILD_LIFE_DIM ADD CONSTRAINT BLD_CREATE_TIME_FK
    FOREIGN KEY (CREATE_TIME)
    REFERENCES TIME_DIM (ID)
;


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000011', 'PROCESS_INSTANCE_DIM', 'Process Instance', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000011', 'PROCESS_ID', 'The id of the process instance.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'PROCESS', 'The process executed.', 0, '00000000-0000-0000-0000-000000000009');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'BUILD_LIFE', 'The build life the process was executed on.', 1, '00000000-0000-0000-0000-000000000010');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'REQUEST_DATE', 'The date the process was requested', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'REQUEST_TIME', 'The time the process was requested', 0, '00000000-0000-0000-0000-000000000002');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'START_DATE', 'The date the process started', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'START_TIME', 'The time the process started', 0, '00000000-0000-0000-0000-000000000002');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'END_DATE', 'The date the process ended', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'END_TIME', 'The time the process ended', 0, '00000000-0000-0000-0000-000000000002');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000011', 'REQUEST_USER', 'The user who requested the process', 0, '00000000-0000-0000-0000-000000000003');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000011', 'REQUEST_SOURCE', 'The type of request source.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000011', 'DURATION', 'The duration of the process in seconds.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000011', 'RESULT', 'The result of the process.', 0, 0);

CREATE TABLE PROCESS_INSTANCE_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    PROCESS_ID       NVARCHAR(36) NOT NULL,
    PROCESS          NVARCHAR(36) NOT NULL,
    BUILD_LIFE       NVARCHAR(36) NOT NULL,
    REQUEST_DATE     NVARCHAR(36) NOT NULL,
    REQUEST_TIME     NVARCHAR(36) NOT NULL,
    START_DATE       NVARCHAR(36) NOT NULL,
    START_TIME       NVARCHAR(36) NOT NULL,
    END_DATE         NVARCHAR(36) NOT NULL,
    END_TIME         NVARCHAR(36) NOT NULL,
    REQUEST_USER     NVARCHAR(36) NOT NULL,
    REQUEST_SOURCE   NVARCHAR(10) NOT NULL,
    DURATION         NVARCHAR(20) NOT NULL,
    RESULT           NVARCHAR(10) NOT NULL
);
CREATE INDEX PID_PROCESS_IX
    ON PROCESS_INSTANCE_DIM(PROCESS);
CREATE INDEX PID_BUILD_LIFE_IX
    ON PROCESS_INSTANCE_DIM(BUILD_LIFE);
CREATE INDEX PID_REQUEST_DATE_IX
    ON PROCESS_INSTANCE_DIM(REQUEST_DATE);
CREATE INDEX PID_REQUEST_TIME_IX
    ON PROCESS_INSTANCE_DIM(REQUEST_TIME);
CREATE INDEX PID_START_DATE_IX
    ON PROCESS_INSTANCE_DIM(START_DATE);
CREATE INDEX PID_START_TIME_IX
    ON PROCESS_INSTANCE_DIM(START_TIME);
CREATE INDEX PID_END_DATE_IX
    ON PROCESS_INSTANCE_DIM(END_DATE);
CREATE INDEX PID_END_TIME_IX
    ON PROCESS_INSTANCE_DIM(END_TIME);
CREATE INDEX PID_REQUEST_USER_IX
    ON PROCESS_INSTANCE_DIM(REQUEST_USER);
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_PROCESS_FK
    FOREIGN KEY (PROCESS)
    REFERENCES PROCESS_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_BUILD_LIFE_FK
    FOREIGN KEY (BUILD_LIFE)
    REFERENCES BUILD_LIFE_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_REQUEST_DATE_FK
    FOREIGN KEY (REQUEST_DATE)
    REFERENCES DATE_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_REQUEST_TIME_FK
    FOREIGN KEY (REQUEST_TIME)
    REFERENCES TIME_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_START_DATE_FK
    FOREIGN KEY (START_DATE)
    REFERENCES DATE_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_START_TIME_FK
    FOREIGN KEY (START_TIME)
    REFERENCES TIME_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_END_DATE_FK
    FOREIGN KEY (END_DATE)
    REFERENCES DATE_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_END_TIME_FK
    FOREIGN KEY (END_TIME)
    REFERENCES TIME_DIM (ID)
;
ALTER TABLE PROCESS_INSTANCE_DIM ADD CONSTRAINT PID_REQUEST_USER_FK
    FOREIGN KEY (REQUEST_USER)
    REFERENCES USER_DIM (ID)
;


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000012', 'TEST_DIM', 'Test', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000012', 'TEST_ID', 'The id of the test.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000012', 'TEST_NAME', 'The test name.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000012', 'TEST_SUITE', 'The test suite.', 1, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000012', 'TEST_TYPE', 'The test type.', 0, 0);

CREATE TABLE TEST_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    TEST_ID          NVARCHAR(2000) NOT NULL,
    TEST_NAME        NVARCHAR(512) NOT NULL,
    TEST_SUITE       NVARCHAR(512) NOT NULL,
    TEST_TYPE        NVARCHAR(20) NOT NULL
);


INSERT INTO REP_DIMENSION (ID, NAME, DESCRIPTION, MUTABLE)
VALUES ('00000000-0000-0000-0000-000000000013', 'TEST_REPORT_DIM', 'Test Report', 1);

INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000013', 'REPORT_ID', 'The id of the report.', 0, 1);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, PRIMARY_KEY)
VALUES ('00000000-0000-0000-0000-000000000013', 'REPORT_NAME', 'The report name.', 0, 0);
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000013', 'BUILD_LIFE', 'The build life the report is on.', 0, '00000000-0000-0000-0000-000000000010');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000013', 'REPORT_DATE', 'The date of the report.', 0, '00000000-0000-0000-0000-000000000001');
INSERT INTO REP_DIMENSION_COLUMN (PARENT_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000013', 'REPORT_TIME', 'The time of the report.', 0, '00000000-0000-0000-0000-000000000002');

CREATE TABLE TEST_REPORT_DIM (
    ID               NVARCHAR(36) NOT NULL PRIMARY KEY,
    REPORT_ID        NVARCHAR(300) NOT NULL,
    REPORT_NAME      NVARCHAR(255) NOT NULL,
    BUILD_LIFE       NVARCHAR(36) NOT NULL,
    REPORT_DATE      NVARCHAR(36) NOT NULL,
    REPORT_TIME      NVARCHAR(36) NOT NULL
);
CREATE INDEX TRD_BUILD_LIFE_IX
    ON TEST_REPORT_DIM(BUILD_LIFE);
CREATE INDEX TRD_REPORT_DATE_IX
    ON TEST_REPORT_DIM(REPORT_DATE);
CREATE INDEX TRD_REPORT_TIME_IX
    ON TEST_REPORT_DIM(REPORT_TIME);
ALTER TABLE TEST_REPORT_DIM ADD CONSTRAINT TRD_BUILD_LIFE_FK
    FOREIGN KEY (BUILD_LIFE)
    REFERENCES BUILD_LIFE_DIM (ID)
;
ALTER TABLE TEST_REPORT_DIM ADD CONSTRAINT TRD_REPORT_DATE_FK
    FOREIGN KEY (REPORT_DATE)
    REFERENCES DATE_DIM (ID)
;
ALTER TABLE TEST_REPORT_DIM ADD CONSTRAINT TRD_REPORT_TIME_FK
    FOREIGN KEY (REPORT_TIME)
    REFERENCES TIME_DIM (ID)
;


INSERT INTO REP_FACT_TABLE (ID, NAME, DESCRIPTION)
VALUES ('00000000-0000-0000-0000-000000000014', 'TEST_INSTANCE', 'Test execution in a build life process');

INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000014', 'TEST', 'The test executed.', 0, '00000000-0000-0000-0000-000000000012');
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE, DIMENSION_ID)
VALUES ('00000000-0000-0000-0000-000000000014', 'REPORT', 'The report the test executed in.', 0, '00000000-0000-0000-0000-000000000013');
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000014', 'RESULT', 'The test result. Usually ''success'' or ''failure''.', 0);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000014', 'DURATION', 'The duration of the test in milliseconds.', 1);
INSERT INTO REP_FACT_TABLE_COLUMN (FACT_TABLE_ID, NAME, DESCRIPTION, NULLABLE)
VALUES ('00000000-0000-0000-0000-000000000014', 'MESSAGE', 'A test message that may describe the failure.', 1);

CREATE TABLE TEST_INSTANCE (
    TEST             NVARCHAR(36) NOT NULL,
    REPORT           NVARCHAR(36) NOT NULL,
    RESULT           NVARCHAR(10) NOT NULL,
    DURATION         NVARCHAR(20),
    MESSAGE          NTEXT
);
CREATE INDEX TI_TEST_IX
    ON TEST_INSTANCE(TEST);
CREATE INDEX TI_REPORT_IX
    ON TEST_INSTANCE(REPORT);
ALTER TABLE TEST_INSTANCE ADD CONSTRAINT TI_TEST_FK
    FOREIGN KEY (TEST)
    REFERENCES TEST_DIM (ID)
;
ALTER TABLE TEST_INSTANCE ADD CONSTRAINT TI_REPORT_FK
    FOREIGN KEY (REPORT)
    REFERENCES TEST_REPORT_DIM (ID)
;
      </sql>
    </change>
    <change number="152">
      <description>Adjust the process and process template reporting tables.</description>
      <sql separator=";">
      ALTER TABLE PROCESS_TEMPLATE_DIM ADD PROCESS_TYPE NVARCHAR(12);
      UPDATE PROCESS_TEMPLATE_DIM SET PROCESS_TYPE = (SELECT DISTINCT PROCESS_TYPE FROM PROCESS_DIM WHERE PROCESS_TEMPLATE = PROCESS_TEMPLATE_DIM.ID);
      ALTER TABLE PROCESS_TEMPLATE_DIM ALTER COLUMN PROCESS_TYPE NVARCHAR(12) NOT NULL;
      ALTER TABLE PROCESS_DIM DROP COLUMN PROCESS_TYPE;
      UPDATE REP_DIMENSION_COLUMN SET PARENT_ID = '00000000-0000-0000-0000-000000000007'
      WHERE PARENT_ID = '00000000-0000-0000-0000-000000000009' AND NAME = 'PROCESS_TYPE';
      UPDATE PROCESS_TEMPLATE_DIM SET PROCESS_TYPE = 'Build' WHERE PROCESS_TYPE = 'Originating';
      </sql>
    </change>
    <change number="153">
      <description>Migrate existing test report data.</description>
      <groovy file="4.0/153_migrate_test_data.groovy"/>
    </change>
    <change number="154">
      <description>Remove old test tables.</description>
      <sql separator=";">
      DROP TABLE TEST_CASE;
      DROP TABLE TEST_SUITE;
      DROP TABLE TEST_REPORT;
      </sql>
    </change>
    <change number="155">
      <description>Remove properties that are lingering on processes even after deletion from the template</description>
      <sql separator=";">
      DELETE FROM WORKFLOW_PROP WHERE WORKFLOW_PROP.NAME NOT IN (
        SELECT PT.NAME
        FROM PROPERTY_TEMPLATE PT
        JOIN WORKFLOW_TEMPLATE WT ON WT.ID = PT.OWNER_ID
        JOIN WORKFLOW W ON W.WORKFLOW_TEMPLATE_ID = WT.ID
        WHERE PT.OWNER_CLASS = 'com.urbancode.ubuild.domain.workflow.template.WorkflowTemplate'
        AND W.ID = WORKFLOW_PROP.WORKFLOW_ID
      )
      </sql>
    </change>
</change-set>